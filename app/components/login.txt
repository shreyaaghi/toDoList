import React from 'react';
import './App.css';

//App component: main component of application, has entire registration form
function App() {
//LoginForm component: "nested class" component within App, represents the registration form itself
  class LoginForm extends React.Component{

    constructor(){

// super() executes parent component constructor function and LoginForm now has access to all the functions of the parent

      super();
// // component state is initalized with two properties - input (user values), errors (validation errors that happen when form is being submitted)
      this.state = {
        input: {},
        errors: {}
      };
// handleChange and handleSubmit are methods that are bound to the component, using bind ensures that "this" will refer to the loginForm component

      this.handleChange = this.handleChange.bind(this);
      this.handleSubmit = this.handleSubmit.bind(this);
    }
    //called when the user interacts with any input field
    // retreives current input state, updates value of the corresponding input field based on the name attribute of the input element that triggered the event
    // then sets the updated input state using this.setState

    handleChange(event){
      let input = this.state.input;
      //identify the input field based on its name attribute
      input[event.target.name] = event.target.value;
      this.setState({input})
    }
    //called when the form is submitted

    handleSubmit(event){
      //prevents the default form submission behavior

      event.preventDefault();

      //calls the validate function to check the validity of the form inputs and if it is valid the form is submitted

      if (this.validate()){
        console.log(this.state);

        let input = {};
        input["username"] = "";
        input["email"] = "";
        input["password"] = "";
        input["confirm_password"] = "";
        this.setState({input : input});

        alert("Form is submitted");
      }
    }

    validate() {
      let input = this.state.input;
      let errors = {};
      let isValid = true;

      //checks if the username is null or undefined
      if (!input["username"]){
        isValid = false;
        errors["username"] ="Please enter your username";
      }

      if (typeof input["username"] !== "undefined"){
        const re = /^\S*$/;
        if(input["username"].length < 6 || !re.test(input["username"])){
          isValid = false;
          errors["username"] = "Please enter valid username"
        }
      }

      if(!input["email"]){
        isValid = false;
        errors["email"] = "Please enter your email address"
      }

      if(typeof input["email"] !== "undefined"){
        var pattern = new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i);
        if(!pattern.test(input["email"])){
          isValid = false;
          errors["email"] = "Please enter a valid email address"
        }
      }

      if(!input["password"]){
        isValid = false;
        errors["password"] = "Please enter your password"
      }


      if(typeof input["password"] !== "undefined"){
        var patternPassword = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})");
        if(!patternPassword.test(input["password"])){
          isValid = false;
          errors["password"] = "The password should contain atleast one lowercase, one uppercase, one digit and one special character. The password should be atleast 8 characters long."
        }
      }

      if ( typeof input["password"] !== "undefined" && typeof input["confirm_password"] !== "undefined"){
        if (input["password"] !== input["confirm_password"]){
          isValid = false;
          errors["confirm_password"] = "Passwords don't match"
        }
      }

      this.setState({errors: errors});

      return isValid;
    }
    render(){
      return(
        <div className='container'>
          <h1 className='text-center mb-4'>REGISTRATION FORM</h1>
          <form onSubmit={this.handleSubmit}>
            <div className='form-group'>
              <label for="username" className='form-label fs-5 fw-bold'>USERNAME:</label>
              <input
              type="text"
              name="username"
              value={this.state.input.username}
              onChange={this.handleChange}
              className='form-control fs-5'
              placeholder='Enter username'
              id="username"
              />
              <div className='text-danger form-text fw-bold fs-5'>{this.state.errors.username}</div>
            </div>
            <div className='form-group'>
              <label for="email" className='form-label fs-5 fw-bold'>EMAIL ADDRESS:</label>
              <input
              type="text"
              name="email"
              value={this.state.input.email}
              onChange={this.handleChange}
              className='form-control fs-5'
              placeholder='Enter Email'
              id="email"
              />
              <div className='text-danger form-text fw-bold fs-5'>{this.state.errors.email}</div>

              <div className='form-group'>
                <label for="password" className='form-label fs-5 fw-bold'>PASSWORD:</label>
                <input 
                type="password"
                name="password"
                value={this.state.input.password}
                onChange={this.handleChange}
                className='form-control fs-5'
                placeholder='Enter password'
                id="password"
                />
                <div className='text-danger form-text fw-bold fs-5'>{this.state.errors.password}</div>
              </div>

              <div className='form-group'>
                <label for="confirm-password" className='form-label fs-5 fw-bold'>CONFIRM PASSWORD:</label>
                <input 
                type="password"
                name="confirm-password"
                id="confirm-password"
                value={this.state.input.confirm_password}
                onChange={this.handleChange}
                className='form-control fs-5'
                placeholder='Enter confirm password'
                />
                <div className='text-danger form-text mb-5 fw-bold fs-5'>{this.state.errors.confirm_password}</div>
              </div>


            </div>
            <input 
              type="submit"
              value="SUBMIT"
              className='btn btn-success d-flex justify-content-center mx-auto mb-3 px-3'
              />
          </form>
        </div>
      )
    }
  }
  return (
    <div className="App">
      <LoginForm/>
    </div>
  );
}

export default App;

validate()
-initalizes input, errors, and isValid as it's variables
-checks if username is empty, then adds error message to errors
-checks if username follows a pattern (at least 6 chars without spaces)
-adds an error message if pattern is not followed

-checks if email or password is empty, adds error message if emptyy
-validates email address format and password format using a regular expression (for password: at least one lowercase, at least one uppercase, one digit, one special character and at least 8 characters long)

checks if confirm password matches with THE password
updates errors state and returns isValid boolean value

render()
-returns JSX? for rendering the form
-input field associated with name, value, and onChange ev handler
-value of each input field bound to corresponding property in the input state and handleChange called when user interacts with field
-error messages displayed